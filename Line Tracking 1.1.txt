#include "derivative.h" /* include peripheral declarations */
#include "TFC\TFC.h"
//#include "math.h"
//#include "tgmath.h"
//#include "stdio.h"
void Compute();
//working variables for compute routine
unsigned long ClastTime, CSampleTime;//, CSampleTimeInSec;
float CSampleTimeInSec;
float CInput, COutput, CSetpoint, Cerror;
float CITerm, ClastInput;
float Ckp, Cki, Ckd;
float CoutMin, CoutMax;
//end of working variables for compute routine


int main(void)
{
	uint32_t LineScanAvgTimeD, t, Delta, i=0, c;
	uint16_t  LineScanTemp[128],LSarray[128], LSavg, Ledge, Redge, Center, GoodRedge, GoodLedge;
	float	TmpLSavg;
	CSetpoint = 64;		//Sets the target, min and max outs for the PID routine
	CoutMin = -1.0;
	CoutMax =  1.0;
	ClastInput = 0.0;
	CITerm = 0.0;
	//************************ Set the k values****************
	Ckp = 0.001;
	Cki = 0.00001;
	Ckd = 0.00009;
	CSampleTime = 400;
	CSampleTimeInSec = ((float)CSampleTime)/1000;
	   Ckp = Ckp;
	   Cki = Cki * CSampleTimeInSec;
	   Ckd = Ckd / CSampleTimeInSec;
	//Set the line scan exposure time
	 LineScanAvgTimeD = 1000;
		TFC_Init();
		t = 0;
		i = 0;
		c = 0;
		/*	
		 // Couldn't Consistently implement
		do 
	{
		TFC_SetLineScanExposureTime(LineScanAvgTimeD);
		//TFC_Ticker[0] = 0;
		c = c + 1;
		if(TFC_Ticker[0]>100 && LineScanImageReady==1)
			{
			 TFC_Ticker[0] = 0;
			 LineScanImageReady=0;
				//  Here is the line scan processing for black line detection Method #2
			LSavg = 0;
			TmpLSavg = 0.0;
			 for(i=0;i<128;i++)   //first save the line to the temp file
			 {
				 	 LineScanTemp[i] = LineScanImage0[i];
				 	 LSarray[i] = LineScanTemp[i];
			 }
			 for(i=0;i<128;i++)  // Now get the average
			 {
				 	 TmpLSavg += LineScanTemp[i];
			 }
			LSavg = (uint16_t) ((TmpLSavg / (108.0 -20.0))) ;	 
			LineScanAvgTimeD += 1000;	 
		}
	} while (LSavg < 4000); 
	*/
		
	TFC_Ticker[3] = 0;
	while (!(TFC_PUSH_BUTTON_0_PRESSED)){ 
		while (TFC_Ticker[3]<1000) continue;
		TFC_Ticker[3] = 0;
		TFC_BAT_LED0_ON;
		while (TFC_Ticker[3]<1000) continue;
		TFC_Ticker[3] = 0;
		TFC_BAT_LED0_OFF;
	}
	TFC_Ticker[3] = 0;
	while (TFC_Ticker[3]<2000) continue;		//wait 2 seconds p button push
	TFC_Delay_mS(1000);                         //wait 1 seconds p button push
	for(;;)
	{	   
		//TFC_Task must be called in your main loop.  This keeps certain processing happy (I.E. Serial port queue check)
			TFC_Task();
			if(TFC_PUSH_BUTTON_1_PRESSED){
				TFC_HBRIDGE_DISABLE;
				
				TFC_SetMotorPWM(0.0,0.0);
				TFC_SetServo(0,0.0);
				break;
			}
			//This Demo program will look at the middle 2 switch to select one of 4 demo modes.
			//Let's look at the middle 2 switches
			switch((TFC_GetDIP_Switch()>>1)&0x03)
			{
			default:
			case 0 :
				break;
					
			case 1:
				break;
				
			case 2 :
				break;
			
			case 3 :
			
				//Demo Mode 3 will be in Freescale Garage Mode.  It will beam data from the Camera to the 
				//Labview Application
				TFC_HBRIDGE_ENABLE;
				TFC_SetMotorPWM(TFC_ReadPot(0),TFC_ReadPot(0));   // Enable if speed control is Disabled
				
				if(TFC_Ticker[0]>100 && LineScanImageReady==1)
					{
					 TFC_Ticker[0] = 0;
					 LineScanImageReady=0;
						//  Here is the line scan processing for black line detection Method #2
					LSavg = 0;
					TmpLSavg = 0.0;
			
					 for(i=0;i<128;i++)   //first save the line to the temp file
					 {
						 	 LineScanTemp[i] = LineScanImage0[i];
						 	 LSarray[i] = LineScanTemp[i];
					 }
					 for(i=0;i<128;i++)  // Now get the average
					 {
						 	 TmpLSavg += LineScanTemp[i];
					 }
					 LSavg = (uint16_t) ((TmpLSavg / 128.0)*.8) ;
					 //TERMINAL_PRINTF("Average = %X,", LSavg);					 
					 for(i=0;i<128;i++)
					 {	 
						if (LineScanTemp[i] >= LSavg)   //this turns the line scan into only 2000 or 50 values and shifts the avg down by 20 for a 1
						 LSarray[i] = 2000;
						else
						 LSarray[i] = 50;
 				     }	 
					 
					 //  Determine edge detection
					 
					 Ledge = 56 ;  
					 Redge = 72 ;
					 for (i=56; i > 4 ;i--)
					 { 
						if ((LineScanTemp[i]-LineScanTemp[i-1]) > 800)
						{
							Ledge = i;        // This is the first edge to the left
							break;
						}
					 }
						GoodLedge = 0;
					 for (i=Ledge; i>=4; i--)
					 {
							if ((LSarray[i] == 2000 )&&(LSarray[i-1] == 2000))  //need two points of white
							{
								GoodLedge = 1;
								break;
							}
					 }
					 
					 //  Now look for the Right edge
					
					 for (i=72;i<124;i++)
					 {
							if ((LineScanTemp[i]-LineScanTemp[i+1]) > 800)
							{
								Redge = i;
								break;
							}
					 }
					 //  Now check for white space after edge
						GoodRedge = 0;
					 for (i=Redge;i<124;i++)
					 {
							if ((LSarray[i] == 2000 )&&(LSarray[i+1] == 2000))  //need two points of white
							{
								GoodRedge = 1;
								break;
							}
					 }
					 
					 // Now set the 2 edges in LSarray so we can see them
					 LSarray[Redge] = 3500;
					 LSarray[Ledge] = 2500;
					 LSarray[127-GoodRedge] = 400;
					 LSarray[GoodLedge] = 200;					 
					 
					 //Calculate distance between lines
					 Delta = Redge-Ledge;
					 LSarray[Delta] += 150;
					 //calculate center
					 Center = Ledge + ((Redge - Ledge)/2);
					 if (Ledge <= 12)  Center = Redge - 40;
					 if (Redge >=115)  Center = Ledge + 40;
					 if (Ledge <= 5 && Redge >=123) Center = CSetpoint;  //Ledge + ((Redge - Ledge)/2);
					 LSarray[Center] = 4000;
					 
					 	if(t==0)
					 		t=3;
					 	else
					 		t--;
					 	
						 TFC_SetBatteryLED_Level(t);					 
						 TERMINAL_PRINTF("\r\n");
						 TERMINAL_PRINTF("L:");						
						 for(i=0;i<128;i++)
						 {
								 TERMINAL_PRINTF("%X,",LineScanTemp[i]);
						 }
						
						 for(i=0;i<128;i++)
						 {
								 TERMINAL_PRINTF("%X",LSarray[i]);
								 if(i==127)
									 TERMINAL_PRINTF("\r\n",LSarray[i]);
								 else
									 TERMINAL_PRINTF(",",LSarray[i]);
						}										
							
					}
					
					//Old Streeing routine
				if((Center >= 56) && (Center <= 72)) {
					TFC_SetServo(0,0.0);          //Straight wheels
					//TFC_SetMotorPWM(0.4,0.4);
				}
				else if ((Center >= 51) && (Center < 56) ){
									TFC_SetServo(0,-0.9);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
								}
				else if ((Center >= 46) && (Center < 51) ){
									TFC_SetServo(0,-0.81);          //turn left
						            //TFC_SetMotorPWM(0.3,0.3);						
								}
				else if ((Center >= 41) && (Center < 46) ){
									TFC_SetServo(0,-0.72);          //turn left
						            //TFC_SetMotorPWM(0.3,0.3);						
								}
				else if ((Center >= 36) && (Center < 41) ){
									TFC_SetServo(0,-0.63);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
								}
				else if ((Center >= 31) && (Center < 36) ){
									TFC_SetServo(0,-0.54);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
												}
				else if ((Center >= 26) && (Center < 31) ){
									TFC_SetServo(0,-0.45);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																}
				else if ((Center >= 21) && (Center < 26) ){
									TFC_SetServo(0,-0.36);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																				}
				else if ((Center >= 16) && (Center < 21) ){
									TFC_SetServo(0,-0.27);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																				}
				else if ((Center >= 11) && (Center < 16) ){
									TFC_SetServo(0,-0.18);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																				}
				else if (Center < 11){
									TFC_SetServo(0,-0.09);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																				}
				//else if (Center >72 ){
					//TFC_SetServo(0,+0.5);          //turn right
					//TFC_SetMotorPWM(0.3,0.3);
			//	}
				else if ((Center > 72 ) && (Center <=82 ) ){
									TFC_SetServo(0,+0.9);          //turn left
						            //TFC_SetMotorPWM(0.3,0.3);						
								}
				else if ((Center > 82 ) && (Center <=87 ) ){
									TFC_SetServo(0,+0.81);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
												}
				else if ((Center > 87) && (Center <=92) ){
									TFC_SetServo(0,+0.72);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
												}
				else if ((Center > 92 ) && (Center <= 97) ){
									TFC_SetServo(0,+0.63);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
												}
				else if ((Center > 97 ) && (Center <= 102) ){
									TFC_SetServo(0,+0.54);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
												}
				else if ((Center > 102 ) && (Center <= 107) ){
									TFC_SetServo(0,+0.45);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																}
				else if ((Center > 107 ) && (Center <= 112) ){
									TFC_SetServo(0,+0.36);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																				}
				else if ((Center > 112 ) && (Center <= 117) ){
									TFC_SetServo(0,+0.27);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																				}
				else if ((Center > 117 ) && (Center <= 122) ){
									TFC_SetServo(0,+0.18);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																								}
				else if (Center > 122){
									TFC_SetServo(0,+0.09);          //turn left
									//TFC_SetMotorPWM(0.3,0.3);						
																												}
			
			//New Streeing Routine using PID controller
				CInput = Center;          // Changed from Cerror to CInput
				//Compute();
				//TFC_SetServo(0,COutput);
			    //float speed = (1.0 - fabs(COutput)) * 0.66;	
			    //TFC_SetMotorPWM(speed,speed);	//start motor at post 0 setting
				break;
			}   //end of Case
	}   // end of infinite for
	return 0;
}  // end of main

void Compute()
{
	float CdInput;
      /*Compute all the working error variables*/
      Cerror = CSetpoint - CInput;
      CITerm += (Cki * Cerror);
      if(CITerm > CoutMax) CITerm = CoutMax;
      else if(CITerm < CoutMin) CITerm = CoutMin;
      CdInput = (CInput - ClastInput);
 
      /*Compute PID Output*/
      COutput = ((Ckp * Cerror) + CITerm - (Ckd * CdInput));
      if(COutput > CoutMax) COutput = CoutMax;
      else if(COutput < CoutMin) COutput = CoutMin;
 
      /*Remember some variables for next time*/
      ClastInput = CInput;
   
}
